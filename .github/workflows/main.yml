name: CI for WindsurfUserSetup
on:
  push:
  workflow_dispatch:
jobs:
  build:
    runs-on: windows-latest
    env:
      RDP_USERNAME: ${{ secrets.RDP_USERNAME || 'runneradmin' }}
      RDP_PASSWORD: ${{ secrets.RDP_PASSWORD || 'P@ssw0rd!' }}
      WINDSURF_VERSION: "1.5.9"
      WINDSURF_HASH: "b3241b91445f79878ccc91626dfe190f90563e53"
      INSTALL_MARKER: "C:/windsurf_installed.txt"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Cache cả tệp cài đặt và thư mục đã cài đặt
      - name: Cache Windsurf Installation
        id: cache-windsurf
        uses: actions/cache@v3
        with:
          path: |
            ./WindsurfUserSetup-x64-${{ env.WINDSURF_VERSION }}.exe
            ${{ env.LOCALAPPDATA }}\Programs\Windsurf
            C:/windsurf_installed.txt
          key: windsurf-full-installation-${{ env.WINDSURF_VERSION }}-${{ env.WINDSURF_HASH }}
          restore-keys: |
            windsurf-full-installation-${{ env.WINDSURF_VERSION }}-

      # Tải xuống nếu không có trong cache
      - name: Download WindsurfUserSetup if needed
        if: steps.cache-windsurf.outputs.cache-hit != 'true'
        run: |
          Start-BitsTransfer -Source "https://windsurf-stable.codeiumdata.com/win32-x64-user/stable/${{ env.WINDSURF_HASH }}/WindsurfUserSetup-x64-${{ env.WINDSURF_VERSION }}.exe" -Destination ".\WindsurfUserSetup-x64-${{ env.WINDSURF_VERSION }}.exe"

      # Cài đặt chỉ khi chưa được cài đặt (kiểm tra file marker)
      - name: Install WindsurfUserSetup
        if: steps.cache-windsurf.outputs.cache-hit != 'true'
        run: |
          Write-Host "Installing Windsurf application..."
          Start-Process -FilePath ".\WindsurfUserSetup-x64-${{ env.WINDSURF_VERSION }}.exe" -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART" -Verb RunAs -Wait
          
          # Tạo file marker để đánh dấu rằng đã cài đặt xong
          "Windsurf installation completed on $(Get-Date)" | Out-File -FilePath "${{ env.INSTALL_MARKER }}"
          Write-Host "Installation completed and marked."

      # Kiểm tra trạng thái cài đặt
      - name: Check installation status
        run: |
          if (Test-Path "${{ env.INSTALL_MARKER }}") {
            $marker = Get-Content "${{ env.INSTALL_MARKER }}"
            Write-Host "Using cached Windsurf installation: $marker"
            
            if (Test-Path "$env:LOCALAPPDATA\Programs\Windsurf") {
              Write-Host "Windsurf installation directory exists."
            } else {
              Write-Host "Warning: Marker exists but installation directory not found!"
            }
          } else {
            Write-Host "No installation marker found. This should not happen if the installation step ran."
          }
      
      - name: Enable TS
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
          Set-LocalUser -Name "${{ env.RDP_USERNAME }}" -Password (ConvertTo-SecureString -AsPlainText "${{ env.RDP_PASSWORD }}" -Force)
      
      - name: Start browser
        run: |
          Start-Process "msedge.exe" -ArgumentList "--no-first-run", "--no-default-browser-check", "--start-maximized", "https://codeium.com/account/register", "https://mail.tm/"

      - name: Download and Extract ngrok for creating secure tunnels
        run: |
          Start-BitsTransfer -Source "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip" -Destination ".\ngrok.zip"
          Expand-Archive -Path '.\ngrok.zip'
          Remove-Item -Path '.\ngrok.zip'
      
      - name: Authenticate with ngrok using the provided token
        run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        
      - name: Start ngrok in background and get tunnel info
        run: |
          # Start ngrok in background to create a TCP tunnel to port 3389 (RDP)
          Start-Process -FilePath ".\ngrok\ngrok.exe" -ArgumentList "tcp", "--region=us-cal-1", "3389" -NoNewWindow
   
          # Query the ngrok API to retrieve the public URL for RDP connection
          $ngrokAPI = Invoke-RestMethod -Uri http://localhost:4040/api/tunnels
          $publicUrl = $ngrokAPI.tunnels[0].public_url
          
          # Display connection information for RDP access
          Write-Host "=============================================="
          Write-Host "RDP Connection Information:"
          Write-Host "NGROK Public URL: $publicUrl"
          Write-Host "Primary Username: ${{ env.RDP_USERNAME }}"
          Write-Host "Primary Password: ${{ env.RDP_PASSWORD }}"
          Write-Host ""
          Write-Host "Additional users: runner1 through runner10"
          Write-Host "Password for all accounts: P@ssw0rd!"
          Write-Host "=============================================="
          
          # Keep the GitHub Actions runner active to allow RDP connections
          Write-Host "Runner will remain active for 6 hours"
          Start-Sleep -Seconds 21600  # Run for 6 hours or adjust as needed
