name: CI

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Enable TS
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
          Set-LocalUser -Name "${{ env.RDP_USERNAME }}" -Password (ConvertTo-SecureString -AsPlainText "${{ env.RDP_PASSWORD }}" -Force)
      - name: Set up udm
        run: |
          # Change to the C:\ directory
          cd C:\

          # Clone the udm repository
          git clone https://github.com/hoangduyhieu/udm.git

          # Create the 'dependencies' directory
          New-Item -ItemType Directory -Path ".\udm\dependencies"

          # Download necessary tools: ffmpeg, N_m3u8DL-RE, and Bento4
          (New-Object System.Net.WebClient).DownloadFile("https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip", "$PWD\ffmpeg.zip")
          (New-Object System.Net.WebClient).DownloadFile("https://github.com/nilaoda/N_m3u8DL-RE/releases/download/v0.3.0-beta/N_m3u8DL-RE_v0.3.0-beta_win-x64_20241203.zip", "$PWD\N_m3u8DL-RE.zip")
          (New-Object System.Net.WebClient).DownloadFile("https://www.bok.net/Bento4/binaries/Bento4-SDK-1-6-0-641.x86_64-microsoft-win32.zip", "$PWD\bento4.zip")

          # Extract and delete each archive in the list
          $files = @("ffmpeg.zip", "N_m3u8DL-RE.zip", "bento4.zip")
          foreach ($file in $files) {
              Expand-Archive -Path ".\$file" -DestinationPath ".\udm\dependencies" -Force
              Remove-Item -Path ".\$file"
          }

          # Install required Python packages for udm
          py -m pip install -r .\udm\requirements.txt --no-warn-script-location

      - name: Set Env and Download
        run: |
          # Change to the C:\udm directory
          cd C:\udm

          # Add dependencies to the system PATH
          $path = [System.Environment]::GetEnvironmentVariable("Path", "Machine")
          $path += ";$PWD\dependencies\ffmpeg-master-latest-win64-gpl\bin"
          $path += ";$PWD\dependencies"
          $path += ";$PWD\dependencies\Bento4-SDK-1-6-0-641.x86_64-microsoft-win32\bin"
          [System.Environment]::SetEnvironmentVariable("Path", $path, "Machine")
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path", "Machine")

          # Set Python encoding to UTF-8
          $Env:PYTHONIOENCODING = "utf-8"

          # # Option for download txt file
          # Invoke-WebRequest -Uri "https://drive.google.com/uc?id=1i9eU0OVtYd_2lZRx3w-u6dZbp66kobyF" -OutFile "cookies.txt"

          # Option for download docs file
          $url = "https://docs.google.com/document/d/1vESIymKDTwYMlsvAGCaelc7e-qM1ZUUPG5a_D7RNQTI/export?format=txt"
          $outputPath = "C:\udm\cookies.txt"

          # Download the file as a string 
          $response = Invoke-WebRequest -Uri $url -UseBasicParsing
          $content = $response.Content

          # Remove BOM if it exists (character \uFEFF at the beginning of the string)
          if ($content.StartsWith([char]0xFEFF)) {
          $content = $content.Substring(1)
          }

          # Replace 8 SPACE characters with a TAB
          $content = $content -replace ' {8}', "`t"

          # Save content to a file
          Set-Content -Path $outputPath -Value $content

          # Download the Udemy course
          # py main.py --url https://itauchile.udemy.com/course/personal-branding-xay-dung-thuong-hieu-ca-nhan --bearer d1ls890qohB8oeXLwaeH9SCjht1gRndbrJkGQUkg --key 1007d1750dc54cf1a8a19d49302b3506:2ede8a9dcb8cbdbf064fb1bb2ed1b38f --captions en_US,vi_VN --srt --concurrent 8 --chapter 1-5

          # py main.py --url https://www.udemy.com/course/data-management-masterclass-the-complete-course --key 7df28363edd0445fbc4d4628c8b6cfd3:bcf28da24ba22e26f3e66c4c165efabe --cookies cookies.txt --captions en_US,vi_VN --srt --concurrent 8 --chapter 13-18

      - name: Download and Extract ngrok for creating secure tunnels
        run: |
          Start-BitsTransfer -Source "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip" -Destination ".\ngrok.zip"
          Expand-Archive -Path '.\ngrok.zip'
          Remove-Item -Path '.\ngrok.zip'
      
      - name: Authenticate with ngrok using the provided token
        run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
    
      - name: Start ngrok in background and get tunnel info
        run: |
          # Start ngrok in background to create a TCP tunnel to port 3389 (RDP)
          Start-Process -FilePath ".\ngrok\ngrok.exe" -ArgumentList "tcp", "--region=us-cal-1", "3389" -NoNewWindow
   
          # Query the ngrok API to retrieve the public URL for RDP connection
          $ngrokAPI = Invoke-RestMethod -Uri http://localhost:4040/api/tunnels
          $publicUrl = $ngrokAPI.tunnels[0].public_url
          
          # Display connection information for RDP access
          Write-Host "=============================================="
          Write-Host "RDP Connection Information:"
          Write-Host "NGROK Public URL: $publicUrl"
          Write-Host "Primary Username: ${{ env.RDP_USERNAME }}"
          Write-Host "Primary Password: ${{ env.RDP_PASSWORD }}"
          Write-Host "=============================================="
          
          # Keep the GitHub Actions runner active to allow RDP connections
          Write-Host "Runner will remain active for 6 hours"
          Start-Sleep -Seconds 21600  # Run for 6 hours or adjust as needed
