name: CI for WindsurfUserSetup
on:
  push:
  workflow_dispatch:

jobs:
  setup-and-cache:
    runs-on: windows-latest
    outputs:
      rdp_username: ${{ env.RDP_USERNAME }}
      rdp_password: ${{ env.RDP_PASSWORD }}
      ngrok_token: ${{ env.NGROK_AUTH_TOKEN }}
    env:
      RDP_USERNAME: ${{ secrets.RDP_USERNAME || 'runneradmin' }}
      RDP_PASSWORD: ${{ secrets.RDP_PASSWORD || 'P@ssw0rd!' }}
      WINDSURF_INSTALL_DIR: 'C:\WindsurfInstall'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Cache WindsurfUserSetup installer
        id: cache-windsurf-installer
        uses: actions/cache@v3
        with:
          path: .\WindsurfUserSetup-x64-1.5.9.exe
          key: windsurf-installer-1.5.9
          restore-keys: |
            windsurf-installer-
      
      - name: Cache Windsurf Installation
        id: cache-windsurf-install
        uses: actions/cache@v3
        with:
          path: ${{ env.WINDSURF_INSTALL_DIR }}
          key: windsurf-installation-1.5.9
          restore-keys: |
            windsurf-installation-
      
      - name: Download WindsurfUserSetup if not cached
        if: steps.cache-windsurf-installer.outputs.cache-hit != 'true'
        run: |
          Start-BitsTransfer -Source "https://windsurf-stable.codeiumdata.com/win32-x64-user/stable/b3241b91445f79878ccc91626dfe190f90563e53/WindsurfUserSetup-x64-1.5.9.exe" -Destination ".\WindsurfUserSetup-x64-1.5.9.exe"
      
      - name: Install WindsurfUserSetup if not cached installation
        if: steps.cache-windsurf-install.outputs.cache-hit != 'true'
        run: |
          # Create installation directory if it doesn't exist
          if (-not (Test-Path "${{ env.WINDSURF_INSTALL_DIR }}")) {
            New-Item -ItemType Directory -Path "${{ env.WINDSURF_INSTALL_DIR }}" -Force
          }
          
          # Install to custom directory with logging
          Write-Host "Installing Windsurf to custom directory for caching"
          
          # Khởi chạy setup mà không chờ đợi
          $process = Start-Process -FilePath ".\WindsurfUserSetup-x64-1.5.9.exe" -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART", "/DIR=${{ env.WINDSURF_INSTALL_DIR }}" -PassThru
          
          # Chờ với timeout, tối đa 5 phút
          $timeout = 300
          $timer = [Diagnostics.Stopwatch]::StartNew()
          
          Write-Host "Waiting for installation to complete (timeout: $timeout seconds)..."
          
          # Giám sát quá trình cài đặt
          while (-not $process.HasExited -and $timer.Elapsed.TotalSeconds -lt $timeout) {
            # Kiểm tra tiến trình mỗi 5 giây
            Start-Sleep -Seconds 5
            
            # Kiểm tra file chính để xem đã cài đặt chưa
            if (Test-Path "${{ env.WINDSURF_INSTALL_DIR }}\Windsurf.exe") {
              Write-Host "Windsurf.exe detected, installation may be complete"
              break
            }
          }
          
          # Kiểm tra nếu quá trình vẫn chạy sau thời gian chờ
          if (-not $process.HasExited) {
            Write-Host "Installation is taking too long, proceeding anyway..."
            try {
              # Cố gắng kết thúc tiến trình nếu nó vẫn đang chạy (không báo lỗi nếu thất bại)
              $process | Stop-Process -Force -ErrorAction SilentlyContinue
            } catch {
              Write-Host "Could not stop installer process, but continuing"
            }
          } else {
            Write-Host "Installation process completed with exit code: $($process.ExitCode)"
          }
          
          # Đợi thêm 10 giây để đảm bảo các file được ghi đầy đủ
          Start-Sleep -Seconds 10
          
          # Verify installation
          if (Test-Path "${{ env.WINDSURF_INSTALL_DIR }}") {
            $fileCount = (Get-ChildItem -Path "${{ env.WINDSURF_INSTALL_DIR }}" -Recurse | Measure-Object).Count
            Write-Host "Windsurf installation directory contains $fileCount files"
            
            if ($fileCount -gt 5) {
              Write-Host "Windsurf installation appears to be successful for caching"
            } else {
              Write-Warning "Installation directory has very few files, may be incomplete"
            }
          } else {
            Write-Error "Windsurf installation failed - directory not found"
            exit 1
          }
      
      - name: Cache ngrok
        id: cache-ngrok
        uses: actions/cache@v3
        with:
          path: .\ngrok
          key: ngrok-v3-stable-windows-amd64
          restore-keys: |
            ngrok-v3-stable-

      - name: Download and Extract ngrok if not cached
        if: steps.cache-ngrok.outputs.cache-hit != 'true'
        run: |
          Start-BitsTransfer -Source "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip" -Destination ".\ngrok.zip"
          Expand-Archive -Path '.\ngrok.zip'
          Remove-Item -Path '.\ngrok.zip'
      
      - name: Setup complete
        run: |
          Write-Host "Setup and cache completed successfully"
          Write-Host "You can now run the RDP server job"

  # Tạo job riêng biệt để chạy RDP server
  rdp-server:
    needs: setup-and-cache
    runs-on: windows-latest
    env:
      RDP_USERNAME: ${{ needs.setup-and-cache.outputs.rdp_username }}
      RDP_PASSWORD: ${{ needs.setup-and-cache.outputs.rdp_password }}
      NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
      WINDSURF_INSTALL_DIR: 'C:\WindsurfInstall'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Enable RDP connections
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
          Set-LocalUser -Name "${{ env.RDP_USERNAME }}" -Password (ConvertTo-SecureString -AsPlainText "${{ env.RDP_PASSWORD }}" -Force)

      - name: Allow multiple RDP connections
        run: |
          # File paths
          $termsrvDllFile = "$env:SystemRoot\System32\termsrv.dll"
          $termsrvDllCopy = "$env:SystemRoot\System32\termsrv.dll.copy"

          # Stop Terminal Service
          Stop-Service -Name TermService -Force

          # Backup ACL and original file
          $termsrvDllAcl = Get-Acl -Path $termsrvDllFile
          Copy-Item -Path $termsrvDllFile -Destination $termsrvDllCopy -Force

          # Take ownership and grant access rights
          takeown.exe /F $termsrvDllFile > $null
          $currentUserName = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
          icacls.exe $termsrvDllFile /grant "$($currentUserName):F" > $null

          # Read file as byte array and prepare for replacement
          $dllAsByte = [System.IO.File]::ReadAllBytes($termsrvDllFile)
          $dllAsText = ($dllAsByte | ForEach-Object { $_.ToString('X2') }) -join ' '

          # Define byte pattern to find RDP connection limit code
          $pattern = [regex]'39 81 3C 06 00 00 0F (?:[0-9A-F]{2} ){4}00'
          $replacement = 'B8 00 01 00 00 89 81 38 06 00 00 90'

          # Check if the pattern is found
          $match = $dllAsText -match $pattern

          if ($match) {
              # Perform replacement
              $dllAsTextReplaced = $dllAsText -replace $pattern, $replacement
              [byte[]] $dllAsBytesReplaced = -split $dllAsTextReplaced -replace '^', '0x'
              
              # Write directly to the original file
              [System.IO.File]::WriteAllBytes($termsrvDllFile, $dllAsBytesReplaced)
          }

          # Restore permissions
          Set-Acl -Path $termsrvDllFile -AclObject $termsrvDllAcl

          # Restart the service
          Start-Service TermService

      # Sử dụng cache của cài đặt Windsurf
      - name: Restore Windsurf Installation from cache
        id: cache-windsurf-install
        uses: actions/cache@v3
        with:
          path: ${{ env.WINDSURF_INSTALL_DIR }}
          key: windsurf-installation-1.5.9
          restore-keys: |
            windsurf-installation-

      # Sử dụng cache installer nếu cần cài đặt mới
      - name: Cache WindsurfUserSetup installer
        id: cache-windsurf-installer
        uses: actions/cache@v3
        with:
          path: .\WindsurfUserSetup-x64-1.5.9.exe
          key: windsurf-installer-1.5.9
          restore-keys: |
            windsurf-installer-

      - name: Install or Use Cached WindsurfUserSetup
        run: |
          if (Test-Path "${{ env.WINDSURF_INSTALL_DIR }}") {
            # Sử dụng từ cache
            Write-Host "Using cached Windsurf installation"
            Get-ChildItem -Path "${{ env.WINDSURF_INSTALL_DIR }}" -Recurse | Measure-Object | Select-Object -ExpandProperty Count
            
            # Tạo các shortcut hoặc registry nếu cần
            if (Test-Path "${{ env.WINDSURF_INSTALL_DIR }}\Windsurf.exe") {
              # Tạo shortcut trên desktop nếu cần
              $WshShell = New-Object -ComObject WScript.Shell
              $Shortcut = $WshShell.CreateShortcut("$env:USERPROFILE\Desktop\Windsurf.lnk")
              $Shortcut.TargetPath = "${{ env.WINDSURF_INSTALL_DIR }}\Windsurf.exe"
              $Shortcut.Save()
            }
          } else {
            # Nếu không có cache installation, tải installer và cài đặt
            if (Test-Path ".\WindsurfUserSetup-x64-1.5.9.exe") {
              Write-Host "Using cached WindsurfUserSetup installer"
            } else {
              Write-Host "Downloading WindsurfUserSetup"
              Start-BitsTransfer -Source "https://windsurf-stable.codeiumdata.com/win32-x64-user/stable/b3241b91445f79878ccc91626dfe190f90563e53/WindsurfUserSetup-x64-1.5.9.exe" -Destination ".\WindsurfUserSetup-x64-1.5.9.exe"
            }
            
            # Tạo thư mục đích
            if (-not (Test-Path "${{ env.WINDSURF_INSTALL_DIR }}")) {
              New-Item -ItemType Directory -Path "${{ env.WINDSURF_INSTALL_DIR }}" -Force
            }
            
            # Cài đặt vào thư mục được chỉ định
            Write-Host "Installing Windsurf to ${{ env.WINDSURF_INSTALL_DIR }}"
            
            # Khởi chạy setup mà không chờ đợi
            $process = Start-Process -FilePath ".\WindsurfUserSetup-x64-1.5.9.exe" -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART", "/DIR=${{ env.WINDSURF_INSTALL_DIR }}" -PassThru
            
            # Chờ với timeout, tối đa 5 phút
            $timeout = 300
            $timer = [Diagnostics.Stopwatch]::StartNew()
            
            Write-Host "Waiting for installation to complete (timeout: $timeout seconds)..."
            
            # Giám sát quá trình cài đặt
            while (-not $process.HasExited -and $timer.Elapsed.TotalSeconds -lt $timeout) {
              # Kiểm tra tiến trình mỗi 5 giây
              Start-Sleep -Seconds 5
              
              # Kiểm tra file chính để xem đã cài đặt chưa
              if (Test-Path "${{ env.WINDSURF_INSTALL_DIR }}\Windsurf.exe") {
                Write-Host "Windsurf.exe detected, installation may be complete"
                break
              }
            }
            
            # Kiểm tra nếu quá trình vẫn chạy sau thời gian chờ
            if (-not $process.HasExited) {
              Write-Host "Installation is taking too long, proceeding anyway..."
              try {
                # Cố gắng kết thúc tiến trình nếu nó vẫn đang chạy
                $process | Stop-Process -Force -ErrorAction SilentlyContinue
              } catch {
                Write-Host "Could not stop installer process, but continuing"
              }
            }
          }
          
          # Mở trình duyệt sau khi cài đặt hoặc khôi phục cache
          Start-Process "msedge.exe" -ArgumentList "--no-first-run", "--no-default-browser-check", "--start-maximized", "https://codeium.com/account/register", "https://mail.tm/"

      # Sử dụng cache ngrok từ job trước
      - name: Cache ngrok
        id: cache-ngrok
        uses: actions/cache@v3
        with:
          path: .\ngrok
          key: ngrok-v3-stable-windows-amd64
          restore-keys: |
            ngrok-v3-stable-

      - name: Setup ngrok
        run: |
          if (-not (Test-Path ".\ngrok\ngrok.exe")) {
            # Tải ngrok nếu không có trong cache
            Write-Host "Downloading ngrok"
            Start-BitsTransfer -Source "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip" -Destination ".\ngrok.zip"
            Expand-Archive -Path '.\ngrok.zip'
            Remove-Item -Path '.\ngrok.zip'
          } else {
            Write-Host "Using cached ngrok"
          }

      - name: Authenticate with ngrok
        run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

      - name: Create user accounts for RDP access
        run: |
          # Create secure password for accounts
          $Password = ConvertTo-SecureString -String "P@ssw0rd!" -AsPlainText -Force
          
          # Create 10 user accounts
          for ($i = 1; $i -le 10; $i++) {
              # Create or update account
              New-LocalUser -Name "runner$i" -Password $Password -FullName "Runner User $i" -Description "Additional RDP user" -AccountNeverExpires -ErrorAction SilentlyContinue
              
              # Add account to Remote Desktop Users group
              Add-LocalGroupMember -Group "Remote Desktop Users" -Member "runner$i" -ErrorAction SilentlyContinue
          }

      - name: Start ngrok tunnel for RDP
        run: |
          # Start ngrok in background to create a TCP tunnel to port 3389 (RDP)
          Start-Process -FilePath ".\ngrok\ngrok.exe" -ArgumentList "tcp", "--region=us-cal-1", "3389" -NoNewWindow
   
          # Query the ngrok API to retrieve the public URL for RDP connection
          $ngrokAPI = Invoke-RestMethod -Uri http://localhost:4040/api/tunnels
          $publicUrl = $ngrokAPI.tunnels[0].public_url
          
          # Display connection information for RDP access
          Write-Host "=============================================="
          Write-Host "RDP Connection Information:"
          Write-Host "NGROK Public URL: $publicUrl"
          Write-Host "Primary Username: ${{ env.RDP_USERNAME }}"
          Write-Host "Primary Password: ${{ env.RDP_PASSWORD }}"
          Write-Host ""
          Write-Host "Additional users: runner1 through runner10"
          Write-Host "Password for all accounts: P@ssw0rd!"
          Write-Host "=============================================="
          
          # Keep the GitHub Actions runner active to allow RDP connections
          Write-Host "Runner will remain active for 6 hours"
          Start-Sleep -Seconds 21600  # Run for 6 hours or adjust as needed
